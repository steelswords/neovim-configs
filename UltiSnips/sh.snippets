snippet script
#!/usr/bin/env bash
# File:        $1
# Author:      Tristan Andrus
# Description: $2
################################################################################

set -o errexit   # Abort on nonzero exitstatus
set -o nounset   # Abort on unbound variable
set -o pipefail  # Don't hide errors within pipes

trap "echo 'An error occurred! Quitting mid-script!'" ERR

# Uncomment to debug
# set -x

################################################################################

$4
endsnippet

snippet args
function print_usage() {
	echo "Usage: \$0 $1"
	exit 1
}

# Parse command line arguments
while :; do
	case \$1 in
		-h|--help)
			print_usage
			;;
		-f|--file)       # Takes an option argument; ensure it has been specified.
			if [ "\$2" ]; then
				file=\$2
				shift
			else
				die 'ERROR: "--file" requires a non-empty option argument.'
			fi
			;;
		--file=?*)
			file=${1#*=} # Delete everything up to "=" and assign the remainder.
			;;
		--file=)         # Handle the case of an empty --file=
			echo 'ERROR: "--file" requires a non-empty option argument.'
			exit 1
			;;
		-v|--verbose)
			verbose=$((verbose + 1))  # Each -v adds 1 to verbosity.
			;;
		--)              # End of all options.
			shift
			break
			;;
		-?*)
			printf 'WARN: Unknown option (ignored): %s\n' "\$1" >&2
			;;
		*)               # Default case: No more options, so break out of the loop.
			break
	esac

	shift
done
endsnippet

snippet heredoc
cat <<- EOF >> $1
$2
EOF
endsnippet

snippet gitroot
GITROOT=$(git rev-parse --show-toplevel) || echo "This script is meant to be run inside the $1 repo. Exiting with error." ; exit 5
endsnippet

snippet colors
# Colors for more visual statuses
_RED_TEXT='\033[31m'
_GREEN_TEXT='\033[32m'
_YELLOW_TEXT='\033[33m'
_BLUE_TEXT='\033[34m'
_CLEAR_TEXT='\033[0m'
_BOLD_TEXT='\033[1m'

function echo_warning() { echo -e "${_YELLOW_TEXT}$*${_CLEAR_TEXT}"; }
function echo_error()   { echo -e "${_RED_TEXT}$*${_CLEAR_TEXT}";    }
function echo_success() { echo -e "${_GREEN_TEXT}$*${_CLEAR_TEXT}";  }
function echo_status()  { echo -e "${_BLUE_TEXT}$*${_CLEAR_TEXT}";   }
endsnippet

snippet argsShort
function printUsageAndQuit() {
    echo "$1"
    exit 1
}

# Check for the right number of arguments
if [[ $# -lt 1 ]] || [[ $# -gt 2 ]]
then
    printUsageAndQuit
fi

# Positional arguments
TARGET="${1-defaulttarget}"
shift

DEFAULT_VALUE_X="no"

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -x|--long-form)
            DEFAULT_VALUE_X="yes"
            shift
            ;;
        *)
            printUsageAndQuit
            ;;
    esac
done
endsnippet

snippet sshheredoc
remote_commands=\$(cat <<- 'ENDSSH'
$1
ENDSSH
)

ssh -t "\$TARGET" "\$remote_commands" &> /dev/null
endsnippet

snippet exists
if ! type "$1" > /dev/null ; then
fi
endsnippet
