snippet vectorprint "Insert a templetized function to print a vector"
template<class T>
void printVector(const std::vector<T> &v)
{
    std::cout << "{";
    for (auto it = v.begin(); it < v.end(); it++)
    {
        std::cout << std::to_string(*it);
        if (it + 1 != v.end())
        {
            std::cout << ", ";
        }
    }
    std::cout << "}" << std::flush;
}
endsnippet

snippet basiccpp
#include <iostream>

int main(int argc, char** argv)
{
}
endsnippet

snippet header
/*******************************************************************************
* \file           `!p snip.rv=fn`
* \author         Tristan Andrus
* \date           `date '+%d %B %Y'`
* \brief          
*******************************************************************************/
#pragma once
endsnippet

snippet incguard
#ifndef $1
#define $1



#endif /* $1 */
endsnippet

snippet random
#include <random>
std::random_device device;
std::mt19937 rng(device());

// Range is [1, 6]
// Other types include normal_distribution, uniform_real_distribution, just about
// any kind of probability distribution you'd like.
std::uniform_int_distribution<> dist(1,6);

int random_number = dist(rng);
endsnippet

snippet sleep_for
std::this_thread::sleep_for(std::chrono::milliseconds($1));
endsnippet

snippet css
const std::string &
endsnippet
